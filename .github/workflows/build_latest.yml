name: Build Latest Release

env:
  DOTNET_SDK_VERSION: "9.0.*"

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
          
      - name: Build Windows
        run: dotnet publish csplayready -c Release -r win-${{ matrix.arch }} --self-contained true
        
      - name: Zip Release
        run: Compress-Archive -Path "csplayready/bin/Release/net9.0/win-${{ matrix.arch }}/publish/*" -DestinationPath "csplayready-win-${{ matrix.arch }}.zip"
        
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: csplayready-win-${{ matrix.arch }}
          path: csplayready-win-${{ matrix.arch }}.zip

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
          
      - name: Build Linux
        run: dotnet publish csplayready -c Release -r linux-${{ matrix.arch }} --self-contained true
        
      - name: Tar Release
        run: tar -czf csplayready-linux-${{ matrix.arch }}.tar.gz -C csplayready/bin/Release/net9.0/linux-${{ matrix.arch }}/publish/ .
        
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: csplayready-linux-${{ matrix.arch }}
          path: csplayready-linux-${{ matrix.arch }}.tar.gz

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}
          
      - name: Build macOS (x64)
        run: dotnet publish csplayready -c Release -r osx-x64 --self-contained true
        
      - name: Build macOS (arm64)
        run: dotnet publish csplayready -c Release -r osx-arm64 --self-contained true
        
      - name: Tar Release (x64)
        run: tar -czf csplayready-mac-x64.tar.gz -C csplayready/bin/Release/net9.0/osx-x64/publish/ .
        
      - name: Tar Release (arm64)
        run: tar -czf csplayready-mac-arm64.tar.gz -C csplayready/bin/Release/net9.0/osx-arm64/publish/ .
        
      - name: Upload Artifact (x64)
        uses: actions/upload-artifact@v3
        with:
          name: csplayready-mac-x64
          path: csplayready-mac-x64.tar.gz
          
      - name: Upload Artifact (arm64)
        uses: actions/upload-artifact@v3
        with:
          name: csplayready-mac-arm64
          path: csplayready-mac-arm64.tar.gz

  create_draft_release:
    name: Create Github draft release
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Audit gh version
        run: gh --version

      - name: Check for existing release
        id: check_release
        run: |
          echo "::echo::on"
          gh release view --repo '${{ github.repository }}' '${{ github.event.inputs.tag }}' \
            && echo "already_exists=true" >> $GITHUB_ENV \
            || echo "already_exists=false" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repo
        if: env.already_exists == 'false'
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.inputs.ref }}'

      - name: Create release
        if: env.already_exists == 'false'
        run: >
          gh release create
          '${{ github.event.inputs.tag }}'
          --draft
          --repo '${{ github.repository }}'
          --title '${{ github.event.inputs.tag }}'
          --target '${{ github.event.inputs.ref }}'
          --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  attach_to_release:
    name: Attach native executables to release
    needs: create_draft_release
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
        
      - name: GH version
        run: gh --version
      
      - name: Fetch executables
        uses: actions/download-artifact@v3

      - name: Tar (linux, macOS)
        run: for dir in *{osx,linux}*; do tar cvzfp "${dir}_${{ env.date }}.tar.gz" "$dir"; done
        
      - name: Zip (windows)
        run: for dir in *win*; do zip -r "${dir}_${{ env.date }}.zip" "$dir"; done

      - name: Upload
        run: |
          until gh release upload --clobber --repo ${{ github.repository }} ${{ github.event.inputs.tag }} *.zip *.tar.gz; do
            echo "Attempt $((++attempts)) to upload release artifacts failed. Will retry in 20s"
            sleep 20
          done
        timeout-minutes: 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}